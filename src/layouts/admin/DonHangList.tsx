// import React, { useEffect, useState } from "react";
// import { layToanBoDonHang, layDonHangTheoNguoiDung, xoaDonHang } from "../../API/DonHangAPI";
// import DonHangModel from "../../models/DonHangModel";
//
// interface DonHangListProps {
//     isAdmin: boolean;
// }
//
// const DonHangList: React.FC<DonHangListProps> = ({ isAdmin }) => {
//     const [donHangs, setDonHangs] = useState<DonHangModel[]>([]);
//
//     useEffect(() => {
//         if (isAdmin) {
//             layToanBoDonHang().then((data: DonHangModel[]) => setDonHangs(data));
//         } else {
//             const maNguoiDung = localStorage.getItem("userId");
//             if (maNguoiDung) {
//                 layDonHangTheoNguoiDung(parseInt(maNguoiDung)).then((data: DonHangModel[]) => setDonHangs(data));
//             }
//         }
//     }, [isAdmin]);
//
//     const handleDelete = (id: number) => {
//         xoaDonHang(id).then(() => {
//             alert("ƒê√£ x√≥a ƒë∆°n h√†ng!");
//             setDonHangs(donHangs.filter((donHang) => donHang.maDonHang !== id));
//         });
//     };
//
//     return (
//         <div>
//             <h1>{isAdmin ? "üì¶ Qu·∫£n l√Ω ƒë∆°n h√†ng" : "üì¶ ƒê∆°n h√†ng c·ªßa t√¥i"}</h1>
//             <ul>
//                 {donHangs.map((donHang) => (
//                     <li key={donHang.maDonHang}>
//                         {donHang.diaChiNhanHang} - {donHang.tongTien} VND
//                         {isAdmin && <button onClick={() => handleDelete(donHang.maDonHang)}>X√≥a</button>}
//                     </li>
//                 ))}
//             </ul>
//         </div>
//     );
// };
//
// export default DonHangList;



// V√≠ d·ª•: src/layouts/admin/DonHangList.tsx
import React, { useEffect, useState } from "react";
// === S·ª¨A IMPORT CHO ƒê√öNG T√äN H√ÄM ===
import { layToanBoDonHangAdmin, xoaDonHangAdmin } from "../../API/DonHangAPI"; // <<< D√ôNG T√äN H√ÄM N√ÄY
import DonHangModel from "../../models/DonHangModel";       // <<< Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n model
import { Link, useNavigate } from "react-router-dom";       // <<< Th√™m import useNavigate
import dinhDangSo from "../../layouts/Utils/dinhDangSo"; // <<< Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n Utils
import { checkAdminRole, isLoggedIn } from "../../layouts/Utils/authCheck"; // <<< Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n Utils

// B·ªè prop isAdmin n·∫øu component n√†y ch·ªâ d√†nh cho admin
const QuanLyDonHangList: React.FC = () => {
    const [donHangs, setDonHangs] = useState<DonHangModel[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [deletingId, setDeletingId] = useState<number | null>(null); // State cho bi·∫øt ƒëang x√≥a ƒë∆°n h√†ng n√†o
    const navigate = useNavigate();

    // H√†m fetch d·ªØ li·ªáu
    const fetchData = () => {
        setLoading(true);
        setError(null);
        // === S·ª¨A T√äN H√ÄM G·ªåI API ===
        layToanBoDonHangAdmin()
            .then((data) => {
                if(Array.isArray(data)) {
                    data.sort((a, b) => b.maDonHang - a.maDonHang); // S·∫Øp x·∫øp
                    setDonHangs(data);
                } else {
                    setDonHangs([]);
                    console.warn("API layToanBoDonHangAdmin kh√¥ng tr·∫£ v·ªÅ m·∫£ng:", data);
                }
                setLoading(false);
            })
            .catch(err => {
                setError(err.message || "L·ªói t·∫£i danh s√°ch ƒë∆°n h√†ng.");
                setLoading(false);
                console.error("L·ªói fetch ƒë∆°n h√†ng admin:", err);
            });
    }

    // useEffect ki·ªÉm tra quy·ªÅn v√† fetch d·ªØ li·ªáu
    useEffect(() => {
        if (!isLoggedIn()) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p.");
            navigate('/dang-nhap', { replace: true });
            return;
        }
        if (!checkAdminRole()) {
            alert("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.");
            navigate('/', { replace: true });
            return;
        }
        fetchData(); // G·ªçi fetch data
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // Ch·ªâ ch·∫°y 1 l·∫ßn

    // H√†m x·ª≠ l√Ω x√≥a
    const handleDelete = (id: number) => {
        if(deletingId === id) return; // Tr√°nh nh·∫•n x√≥a nhi·ªÅu l·∫ßn

        if(window.confirm(`B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng #${id}?`)) {
            setDeletingId(id); // B·∫Øt ƒë·∫ßu x√≥a
            // === S·ª¨A T√äN H√ÄM G·ªåI API ===
            xoaDonHangAdmin(id)
                .then(() => {
                    alert("ƒê√£ x√≥a ƒë∆°n h√†ng th√†nh c√¥ng!");
                    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch b·∫±ng c√°ch l·ªçc b·ªè
                    setDonHangs(currentDonHangs =>
                        currentDonHangs.filter((donHang) => donHang.maDonHang !== id)
                    );
                })
                .catch(error => {
                    alert(`L·ªói khi x√≥a ƒë∆°n h√†ng: ${error.message}`);
                    console.error("L·ªói x√≥a ƒë∆°n h√†ng:", error);
                })
                .finally(() => {
                    setDeletingId(null); // K·∫øt th√∫c x√≥a
                });
        }
    };

    // --- Render ---
    if (loading) return <div className="container mt-4 text-center"><h5>ƒêang t·∫£i danh s√°ch ƒë∆°n h√†ng...</h5></div>;
    if (error) return <div className="container mt-4 alert alert-danger">L·ªói: {error}</div>;

    return (
        <div className="container mt-4 mb-5">
            <h1 className="mb-4">üì¶ Qu·∫£n l√Ω ƒë∆°n h√†ng</h1>
            <div className="table-responsive">
                <table className="table table-bordered table-hover">
                    <thead className="table-light">
                    <tr className="text-center align-middle">
                        <th>M√£ ƒêH</th>
                        <th>Ng√†y ƒë·∫∑t</th>
                        <th>Ng∆∞·ªùi ƒë·∫∑t (Username)</th>
                        <th>ƒê·ªãa ch·ªâ nh·∫≠n</th>
                        <th className="text-end">T·ªïng ti·ªÅn</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>H√†nh ƒë·ªông</th>
                    </tr>
                    </thead>
                    <tbody className="align-middle">
                    {donHangs.length === 0 ? (
                        <tr><td colSpan={7} className="text-center">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.</td></tr>
                    ) : (
                        donHangs.map((donHang) => (
                            <tr key={donHang.maDonHang}>
                                <td className="text-center">{donHang.maDonHang}</td>
                                <td className="text-center">{donHang.ngayTao ? new Date(donHang.ngayTao).toLocaleDateString('vi-VN') : 'N/A'}</td>
                                <td>{donHang.nguoiDung?.tenDangNhap || 'N/A'}</td>
                                <td>{donHang.diaChiNhanHang}</td>
                                <td className="text-end">{dinhDangSo(donHang.tongTien)} ƒë</td>
                                <td className="text-center">
                                        <span className={`badge rounded-pill ${
                                            donHang.trangThai === 'ƒê√£ h·ªßy' ? 'bg-danger' :
                                                donHang.trangThai === 'ƒê√£ giao h√†ng' ? 'bg-success' :
                                                    donHang.trangThai === 'ƒêang giao h√†ng' ? 'bg-info' :
                                                        donHang.trangThai === 'ƒêang x·ª≠ l√Ω' ? 'bg-warning text-dark' :
                                                            'bg-secondary'
                                        }`}>
                                            {donHang.trangThai || 'Ch∆∞a x√°c ƒë·ªãnh'}
                                        </span>
                                </td>
                                <td className="text-center">
                                    {/* N√∫t s·ª≠a tr·∫°ng th√°i (c·∫ßn component/modal ri√™ng) */}
                                    {/* <button className="btn btn-warning btn-sm me-2" title="S·ª≠a tr·∫°ng th√°i"><i className="fas fa-edit"></i></button> */}
                                    <button
                                        className="btn btn-danger btn-sm"
                                        title="X√≥a ƒë∆°n h√†ng"
                                        onClick={() => handleDelete(donHang.maDonHang)}
                                        disabled={deletingId === donHang.maDonHang} // Disable khi ƒëang x√≥a
                                    >
                                        {deletingId === donHang.maDonHang ? (
                                            <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        ) : (
                                            <i className="fas fa-trash-alt"></i>
                                        )}
                                    </button>
                                </td>
                            </tr>
                        ))
                    )}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

// S·ª≠a t√™n export n·∫øu c·∫ßn
export default QuanLyDonHangList;